on:
  workflow_call:
    inputs:
      workdir:
        required: false
        default: "./"
        type: "string"
        description: "Specify all of node steps where are run"

      node:
        required: false
        default: "lts/*"
        type: "string"
        description: "Specify node version, default: lts"

      build:
        required: false
        default: "build"
        type: "string"
        description: "Specify build command"

      test:
        required: false
        default: ""
        type: "string"
        description: "Specify test command"


jobs:
  setup:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.workdir }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node }}
      - uses: pnpm/action-setup@v3
        with:
          version: 8
          run_install: false

      - name: pnpm cache dir
        id: pnpm-cache-dir
        run: echo "PNPM_STORE=$(pnpm store path --silent)" >> $GITHUB_OUTPUT

      - name: restore node cache
        uses: actions/cache/restore@v4
        id: cache-restore-node_modules
        env:
          cache-name: cache-node_modules
        with:
          # caching node_modules
          path: |
            ${{ inputs.workdir }}node_modules
            **/node_modules
            **/.eslintcache
            ${{ steps.pnpm-cache-dir.outputs.PNPM_STORE }}
          key: ${{ runner.os }}-pnpm-store-${{ env.cache-name }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-${{ env.cache-name }}-

      - name: setup
        if: steps.cache-restore-node_modules.outputs.cache-hit != 'true'
        run: |
          pnpm i
          pnpm i -g eslint
          pnpm i -g prettier

      - name: cache node modules
        if: ${{ steps.cache-restore-node_modules.outputs.cache-hit != 'true'}}
        uses: actions/cache/save@v4
        id: cache-save-node_modules
        env:
          cache-name: cache-node_modules
        with:
          # caching node_modules
          path: |
            ${{ inputs.workdir }}node_modules
            **/node_modules
            **/.eslintcache
            ${{ steps.pnpm-cache-dir.outputs.PNPM_STORE }}
          key: ${{ runner.os }}-pnpm-store-${{ env.cache-name }}-${{ hashFiles('**/pnpm-lock.yaml') }}

  lint:
    needs: [setup]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.workdir }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node }}
      - uses: pnpm/action-setup@v3
        with:
          version: 8
          run_install: false

      - name: pnpm cache dir
        id: pnpm-cache-dir
        run: echo "PNPM_STORE=$(pnpm store path --silent)" >> $GITHUB_OUTPUT

      - name: restore node cache
        uses: actions/cache/restore@v4
        id: cache-restore-node_modules
        env:
          cache-name: cache-node_modules
        with:
          # caching node_modules
          path: |
            ${{ inputs.workdir }}node_modules
            **/node_modules
            **/.eslintcache
            ${{ steps.pnpm-cache-dir.outputs.PNPM_STORE }}
          key: ${{ runner.os }}-pnpm-store-${{ env.cache-name }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-${{ env.cache-name }}-

      - name: setup
        if: steps.cache-restore-node_modules.outputs.cache-hit != 'true'
        run: |
          pnpm i
          pnpm i -g eslint
          pnpm i -g prettier

      - name: cache node modules
        if: ${{ steps.cache-restore-node_modules.outputs.cache-hit != 'true'}}
        uses: actions/cache/save@v4
        id: cache-save-node_modules
        env:
          cache-name: cache-node_modules
        with:
          # caching node_modules
          path: |
            ${{ inputs.workdir }}node_modules
            **/node_modules
            **/.eslintcache
            ${{ steps.pnpm-cache-dir.outputs.PNPM_STORE }}
          key: ${{ runner.os }}-pnpm-store-${{ env.cache-name }}-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: lint
        run: |
          pnpm eslint .
          pnpm prettier . --check-debug

  build:
    needs: [lint]
    outputs:
      project: ${{ steps.environments.outputs.project }}
      version: ${{ steps.environments.outputs.version }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.workdir }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node }}
      - uses: pnpm/action-setup@v3
        with:
          version: 8
          run_install: false

      - name: pnpm cache dir
        id: pnpm-cache-dir
        run: echo "PNPM_STORE=$(pnpm store path --silent)" >> $GITHUB_OUTPUT

      - name: restore node cache
        uses: actions/cache/restore@v4
        id: cache-restore-node_modules
        env:
          cache-name: cache-node_modules
        with:
          # caching node_modules
          path: |
            ${{ inputs.workdir }}node_modules
            **/node_modules
            **/.eslintcache
            ${{ steps.pnpm-cache-dir.outputs.PNPM_STORE }}
          key: ${{ runner.os }}-pnpm-store-${{ env.cache-name }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-${{ env.cache-name }}-

      - name: setup
        if: steps.cache-restore-node_modules.outputs.cache-hit != 'true'
        run: |
          pnpm i
          pnpm i -g eslint
          pnpm i -g prettier

      - name: cache node modules
        if: ${{ steps.cache-restore-node_modules.outputs.cache-hit != 'true'}}
        uses: actions/cache/save@v4
        id: cache-save-node_modules
        env:
          cache-name: cache-node_modules
        with:
          # caching node_modules
          path: |
            ${{ inputs.workdir }}node_modules
            **/node_modules
            **/.eslintcache
            ${{ steps.pnpm-cache-dir.outputs.PNPM_STORE }}
          key: ${{ runner.os }}-pnpm-store-${{ env.cache-name }}-${{ hashFiles('**/pnpm-lock.yaml') }}

      
      - name: build
        if: ${{ inputs.build }}
        run: pnpm ${{ inputs.build }}

      - name: test
        if: ${{ inputs.test }}
        run: pnpm ${{ inputs.test }}

      - id: environments
        name: environments
        run: |
          echo "
          project=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].name')
          version=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].version')
          " >> "$GITHUB_OUTPUT"
        shell: bash

      
      - name: build
        if: ${{ inputs.build }}
        run: pnpm ${{ inputs.build }}

      - name: test
        if: ${{ inputs.test }}
        run: pnpm ${{ inputs.test }}

