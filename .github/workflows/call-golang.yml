on:
  workflow_call:
    inputs:
      workdir:
        required: false
        default: "./"
        type: "string"
        description: "Specify all of golang steps where are run"

      GOOS:
        required: false
        default: "linux"
        type: "string"
        description: "GOOS target os"

      GOARCH:
        required: false
        default: "amd64"
        type: "string"
        description: "GOARCH arch"

      ENTRANCE:
        required: false
        default: "./main.go"
        type: "string"
        description: "Specify main.go relative path"

    outputs:
      version:
        value: ${{ jobs.build.outputs.version }}
        description: "major version"

jobs:
  setup:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.workdir }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-go@v5
        with:
          go-version: '1.20'
          cache: false

      - name: restore golang cache
        uses: actions/cache/restore@v4
        id: cache-restore-golang
        env:
          cache-name: cache-gomod
        with:
          path: |
            ~/go
          key: ${{ runner.os }}-golang-store-${{ env.cache-name }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-golang-store-${{ env.cache-name }}-

      - name: setup
        if: ${{ steps.cache-restore-golang.outputs.cache-hit != 'true'}}
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.55.1
          curl -sfL https://raw.githubusercontent.com/securego/gosec/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v2.18.2
          go install github.com/gotesttools/gotestfmt/v2/cmd/gotestfmt@v2.5.0
          go install github.com/jstemmer/go-junit-report/v2@v2.1.0

      - name: cache gomod cache
        if: ${{ steps.cache-restore-golang.outputs.cache-hit != 'true'}}
        id: cache-save-golang
        uses: actions/cache/save@v4
        env:
          cache-name: cache-gomod
        with:
          path: |
            ~/go
          key: ${{ runner.os }}-golang-store-${{ env.cache-name }}-${{ hashFiles('**/go.sum') }}

  lint:
    needs: [setup]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.workdir }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-go@v5
        with:
          go-version: '1.20'
          cache: false

      - name: restore golang cache
        uses: actions/cache/restore@v4
        id: cache-restore-golang
        env:
          cache-name: cache-gomod
        with:
          path: |
            ~/go
          key: ${{ runner.os }}-golang-store-${{ env.cache-name }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-golang-store-${{ env.cache-name }}-

      - name: setup
        if: ${{ steps.cache-restore-golang.outputs.cache-hit != 'true'}}
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.55.1
          curl -sfL https://raw.githubusercontent.com/securego/gosec/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v2.18.2
          go install github.com/gotesttools/gotestfmt/v2/cmd/gotestfmt@v2.5.0
          go install github.com/jstemmer/go-junit-report/v2@v2.1.0

      - name: cache gomod cache
        if: ${{ steps.cache-restore-golang.outputs.cache-hit != 'true'}}
        id: cache-save-golang
        uses: actions/cache/save@v4
        env:
          cache-name: cache-gomod
        with:
          path: |
            ~/go
          key: ${{ runner.os }}-golang-store-${{ env.cache-name }}-${{ hashFiles('**/go.sum') }}

      - name: golangci-lint
        run: |
          go version
          golangci-lint -vv

  security:
    needs: [setup]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.workdir }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-go@v5
        with:
          go-version: '1.20'
          cache: false

      - name: restore golang cache
        uses: actions/cache/restore@v4
        id: cache-restore-golang
        env:
          cache-name: cache-gomod
        with:
          path: |
            ~/go
          key: ${{ runner.os }}-golang-store-${{ env.cache-name }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-golang-store-${{ env.cache-name }}-

      - name: setup
        if: ${{ steps.cache-restore-golang.outputs.cache-hit != 'true'}}
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.55.1
          curl -sfL https://raw.githubusercontent.com/securego/gosec/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v2.18.2
          go install github.com/gotesttools/gotestfmt/v2/cmd/gotestfmt@v2.5.0
          go install github.com/jstemmer/go-junit-report/v2@v2.1.0

      - name: cache gomod cache
        if: ${{ steps.cache-restore-golang.outputs.cache-hit != 'true'}}
        id: cache-save-golang
        uses: actions/cache/save@v4
        env:
          cache-name: cache-gomod
        with:
          path: |
            ~/go
          key: ${{ runner.os }}-golang-store-${{ env.cache-name }}-${{ hashFiles('**/go.sum') }}

      - name: gosec checkout
        run: |
          mkdir -p build
          gosec -fmt=json -out=build/gosec-report.json -stdout -verbose=text *.go
          tree

      - name: upload gosec-report
        uses: actions/upload-artifact@v4
        with:
          name: gosec-report
          path: |
              ${{ inputs.workdir }}build/gosec-report.json

  build:
    needs: [lint, setup, security]
    outputs:
      project: ${{ steps.environments.outputs.project }}
      version: ${{ steps.environments.outputs.version }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.workdir }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-go@v5
        with:
          go-version: '1.20'
          cache: false

      - name: restore golang cache
        uses: actions/cache/restore@v4
        id: cache-restore-golang
        env:
          cache-name: cache-gomod
        with:
          path: |
            ~/go
          key: ${{ runner.os }}-golang-store-${{ env.cache-name }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-golang-store-${{ env.cache-name }}-

      - name: setup
        if: ${{ steps.cache-restore-golang.outputs.cache-hit != 'true'}}
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.55.1
          curl -sfL https://raw.githubusercontent.com/securego/gosec/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v2.18.2
          go install github.com/gotesttools/gotestfmt/v2/cmd/gotestfmt@v2.5.0
          go install github.com/jstemmer/go-junit-report/v2@v2.1.0

      - name: cache gomod cache
        if: ${{ steps.cache-restore-golang.outputs.cache-hit != 'true'}}
        id: cache-save-golang
        uses: actions/cache/save@v4
        env:
          cache-name: cache-gomod
        with:
          path: |
            ~/go
          key: ${{ runner.os }}-golang-store-${{ env.cache-name }}-${{ hashFiles('**/go.sum') }}

      - name: download gosec-report
        uses: actions/download-artifact@v4
        with:
          name: gosec-report
          path: |
              ${{ inputs.workdir }}build/gosec-report.json

      - id: environments
        name: environments
        run: |
          version=$(git describe --tags $(git rev-list --tags --max-count=1) 2>/dev/null || echo "v0.1.0")
          version=${version#v}
          version="$version-$(git rev-parse --short HEAD)"
          project=$(go list -m)
          echo "
          project=${project##*/}
          version=$version
          " >> "$GITHUB_OUTPUT"
        shell: bash

      - name: build binary
        run: |
          mkdir -p build
          CGO_ENABLE=0 GOOS=${{ inputs.GOOS }} GOARCH=${{ inputs.GOARCH }} go build -a -o build/${{ steps.environments.outputs.project }} ${{ inputs.ENTRANCE }}

      - name: test
        run: |
          go test -gcflags="all=-N -l" -coverprofile=build/coverage.out -covermode count -json -v ./... 2>&1 | tee build/test.json | gotestfmt
          go-junit-report -parser gojson -in build/test.json -out build/report.xml
      - name: upload targets
        uses: actions/upload-artifact@v4
        with:
          name: targets
          path: |
              ${{ inputs.workdir }}build/
