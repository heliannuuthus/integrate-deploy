on:
  workflow_call:
    inputs:
      workdir:
        required: false
        default: "./"
        type: "string"
        description: "Specify all of steps where are run"
    outputs:
      version:
        description: "gradle application version"
        value: ${{ jobs.build.outputs.version }}

    secrets:
      SONAR_HOST_URL:
        required: false
        description: "sonar-scanner -Dsonar.host.url"
      SONAR_TOKEN:
        required: false
        description: "sonar-scanner -Dsonar.token"
jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.environments.outputs.version }}
    defaults:
      run:
        working-directory: ${{ inputs.workdir }}

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "adopt"
      - name: setup gradle
        uses: gradle/actions/setup-gradle@v3
      - name: build and test
        run: gradle clean build
        env:
          GPR_USER: ${{ secrets.user }}
          GPR_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - id: sonar-restore-cache
        name: restore sonar cache
        uses: actions/cache@v4
        with:
          path: |
            ~/sonar-scanner
            ~/.sonar
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: setup-sonar
        if:  ${{ steps.sonar-restore-cache.outputs.cache-hit != 'true' }} 
        run: |
          mkdir -p ~/sonar-scanner/.sonar
          curl -L -o sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
          unzip -q -o sonar-scanner.zip -d ~/
          mv ~/sonar-scanner-5.0.1.3006-linux/* ~/sonar-scanner
          rm -r ~/sonar-scanner-5.0.1.3006-linux
        shell: bash

      - id: environments
        name: environments
        run: |
          echo "
          project=$(gradle name -q | awk 'NR==1 {print}')
          version=$(gradle version -q | awk 'NR==1 {print}')
          sonar_enabled=${{ secrets.SONAR_TOKEN != '' && secrets.SONAR_HOST_URL != ''}}
          " >> "$GITHUB_OUTPUT"
      
      - name: sonar run
        if: ${{ steps.environments.outputs.sonar_enabled == 'true'}}
        run: 
          ~/sonar-scanner/bin/sonar-scanner
          -Dsonar.projectBaseDir=./
          -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }}
          -Dsonar.token=${{ secrets.SONAR_TOKEN }}
          -Dsonar.language=java
          -Dsonar.plugins.downloadOnlyRequired=true
          -Dsonar.sourceEncoding=UTF-8
          -Dsonar.java.binaries=**/target/classes
          -Dsonar.inclusions=**/src/**/main/**/*.java
          -Dsonar.exclusions=**/src/**/test/**/*.java
          -Dsonar.test.inclusions=src/**/test/**/*.java
          -Dsonar.test.exclusions=src/**/main/**/*.java
          -Dsonar.pullrequest.key=${{github.event.pull_request.number}}
          -Dsonar.pullrequest.branch=${{ github.event.pull_request.head.ref }}
          -Dsonar.pullrequest.base=${{ github.event.pull_request.base.ref }}
          -Dsonar.projectKey=${{ steps.environments.outputs.project }}
          -Dsonar.projectVersion=${{ steps.environments.outputs.version }}
          -Dsonar.coverage.jacoco.xmlReportPaths=build/reports/jacocoReports.xml
  
      - name: upload target
        uses: actions/upload-artifact@v4
        with:
          name: target
          path: |
            ${{ inputs.workdir }}build/
