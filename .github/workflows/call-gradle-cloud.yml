on:
  workflow_call:
    inputs:
      workdir:
        required: false
        default: "./"
        type: "string"
        description: "Specify all of steps where are run"
    secrets:
      SONAR_HOST_URL:
        required: false
        description: "Sonarqube host url"
      SONAR_TOKEN:
        required: false
        description: "Sonarqube Token"

jobs:
  lint:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.workdir }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"

      - name: setup-gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          gradle-home-cache-cleanup: true

      - name: build and test
        run: gradle clean build
        env:
          GPR_USER: ${{ secrets.user }}
          GPR_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    needs: [lint]
    outputs:
      project: ${{ steps.environments.outputs.project }}
      version: ${{ steps.environments.outputs.version }}
      sonar_enabled: ${{ steps.environments.outputs.sonar_enabled }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.workdir }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"

      - name: setup-gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          gradle-home-cache-cleanup: true

      - id: environments
        name: environments
        run: |
          echo "
          project=$(gradle name -q | awk 'NR==1 {print}')
          version=$(gradle version -q | awk 'NR==1 {print}')
          sonar_enabled=${{ secrets.SONAR_TOKEN != '' && secrets.SONAR_HOST_URL != ''}}
          " >> "$GITHUB_OUTPUT"
        shell: bash

      - name: build and test
        run: gradle clean build
        env:
          GPR_USER: ${{ secrets.user }}
          GPR_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      
      - id: sonar-restore-cache
        name: restore sonar cache
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/sonar-scanner
            ~/.sonar
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: setup-sonar
        if:  ${{ steps.sonar-restore-cache.outputs.cache-hit != 'true' }}
        run: |
          mkdir -p ~/sonar-scanner/.sonar
          curl -L -o sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
          unzip -q -o sonar-scanner.zip -d ~/
          mv ~/sonar-scanner-5.0.1.3006-linux/* ~/sonar-scanner
          rm -r ~/sonar-scanner-5.0.1.3006-linux
        shell: bash

      - name: sonar analyze
        run:
          ~/sonar-scanner/bin/sonar-scanner
          -Dsonar.projectBaseDir=./
          -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }}
          -Dsonar.token=${{ secrets.SONAR_TOKEN }}
          -Dsonar.pullrequest.key=${{github.event.pull_request.number}}
          -Dsonar.pullrequest.branch=${{ github.event.pull_request.head.ref }}
          -Dsonar.pullrequest.base=${{ github.event.pull_request.base.ref }}
          -Dsonar.projectKey=${{ steps.environments.outputs.project }}
          -Dsonar.projectVersion=${{ steps.environments.outputs.version }}
          -Dsonar.language=java
          -Dsonar.sourceEncoding=UTF-8
          -Dsonar.java.binaries=**/*
          -Dsonar.inclusions=**/src/**/main/**/*.java
          -Dsonar.exclusions=**/src/**/test/**/*.java
          -Dsonar.test.inclusions=**/src/**/test/**/*.java
          -Dsonar.test.exclusions=**/src/**/main/**/*.java
          -Dsonar.coverage.jacoco.xmlReportPaths=build/reports/jacocoReports.xml

      - name: upload target
        uses: actions/download-artifact@v4
        with:
          name: target
          path: |
              ${{ inputs.workdir }}build/

  containerize:
    needs: [build]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.workdir }}
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: download target
        uses: actions/download-artifact@v4
        with:
          name: target
          path: |
              ${{ inputs.workdir }}build/

      - id: environments
        name: environments
        run: |
          echo "timestamp=$(date +%Y%m%d | cut -c 3-8)" >> "$GITHUB_OUTPUT"
          echo "short_sha=$(git rev-parse --short HEAD)" >> "$GITHUB_OUTPUT"

      - id: meta
        name: container meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=semver,enable=${{ github.ref == format('refs/heads/{0}', 'master') }},pattern={{version}}-${{ steps.environments.outputs.timestamp }}rc-${{ steps.environments.outputs.short_sha }},value=${{ needs.build.outputs.version || 'v0.0.1' }}
            type=semver,enable=${{ github.ref != format('refs/heads/{0}', 'master') }},pattern={{version}}-${{ steps.environments.outputs.timestamp }}alpha-${{ steps.environments.outputs.short_sha }},value=${{ needs.build.outputs.version || 'v0.0.1'  }}

      - name: authenticate
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: push github
        uses: docker/build-push-action@v5
        with:
          context: ${{ inputs.workdir }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
