on:
  workflow_call:
    inputs:
      workdir:
        required: false
        default: "./"
        type: "string"
        description: "Specify all of steps where are run"

      toolchain:
        required: false
        type: "string"
        default: "nightly"
        description: "Rust toolchain version"

      clippy:
        required: false
        type: "boolean"
        default: true
        description: "Rust clippy enable"

jobs:
  lint:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.workdir }}
    steps:
      - uses: actions/checkout@v4
      - name: cache registry cache
        id: heliannuuthus-cargo-cache
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-heliannuuthus-cargo-cache
      - name: specify toolchain
        run: |
          rustup default ${{ inputs.toolchain }}
          rustup component add rustfmt --toolchain ${{ inputs.toolchain }} 
          rustup component add clippy --toolchain ${{ inputs.toolchain }}
      - name: fmt
        run: tree ~/.cargo && cargo fmt -- --check --color always
      - name: clippy
        if: ${{ inputs.clippy }}
        run: cargo clippy --all-targets --all-features -- -D warnings

  security:
    runs-on: ubuntu-latest
    continue-on-error: true
    defaults:
      run:
        working-directory: ${{ inputs.workdir }}
    steps:
      - uses: actions/checkout@v4
      - name: cache registry cache
        id: heliannuuthus-cargo-cache
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-heliannuuthus-cargo-cache
      - name: specify toolchain
        run: rustup default ${{ inputs.toolchain }}
      - name: scan
        run: cargo generate-lockfile && cargo audit
