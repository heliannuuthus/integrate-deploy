on:
  workflow_call:
    inputs:
      workdir:
        required: false
        default: "./"
        type: "string"
        description: "Specify all of rust steps where are run"

      toolchain:
        required: false
        default: "nightly"
        type: "string"
        description: "Specify rust toolchain"

      targets:
        required: false
        default: "x86_64-unknown-linux-gnu"
        type: "string"
        description: "Specify rust toolchain"

    outputs:
      version:
        value: ${{ jobs.build.outputs.version }}
        description: "major version"

jobs:
  setup:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.workdir }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: linux install dependencies
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: libwebkit2gtk-4.0-dev build-essential curl wget libglib2.0-dev libssl-dev libgtk-3-dev libappindicator3-dev librsvg2-dev libappindicator-dev libgdk3.0-cil libatk1.0-dev libgtk-3-dev 
          version: rust-ci
          execute_install_scripts: true

      - name: install stable toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ inputs.toolchain }}
          targets: ${{ inputs.targets }}
          components: clippy, rustfmt

      - name: rust cache
        id: rust-cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: "${{ inputs.workdir }}"
          cache-targets: "false"
          cache-all-crates: "true"
          prefix-key: "rust-cache"
          shared-key: "${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}"

      - name: setup tools
        run: |
          cargo install cargo-audit --version 0.20.0
          cargo install cargo-auditable --version 0.6.2
          cargo install cargo2junit --version 0.1.13
          cargo install cargo-tarpaulin --version 0.29.2
          cargo install cargo-nextest --version 0.9.70

  lint:
    needs: [setup]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.workdir }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: linux install dependencies
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: libwebkit2gtk-4.0-dev build-essential curl wget libglib2.0-dev libssl-dev libgtk-3-dev libappindicator3-dev librsvg2-dev libappindicator-dev libgdk3.0-cil libatk1.0-dev libgtk-3-dev 
          version: rust-ci
          execute_install_scripts: true

      - name: install stable toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ inputs.toolchain }}
          targets: ${{ inputs.targets }}
          components: clippy, rustfmt

      - name: rust cache
        id: rust-cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: "${{ inputs.workdir }}"
          cache-targets: "false"
          cache-all-crates: "true"
          prefix-key: "rust-cache"
          shared-key: "${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}"

      - name: setup tools
        run: |
          cargo install cargo-audit --version 0.20.0
          cargo install cargo-auditable --version 0.6.2
          cargo install cargo2junit --version 0.1.13
          cargo install cargo-tarpaulin --version 0.29.2
          cargo install cargo-nextest --version 0.9.70

      - name: lint
        run: |
          cargo fmt --all -- --check
          cargo check --no-default-features
          cargo clippy --all-targets --all-features -- -D warnings

  build:
    needs: [lint]
    outputs:
      project: ${{ steps.environments.outputs.project }}
      version: ${{ steps.environments.outputs.version }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.workdir }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: linux install dependencies
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: libwebkit2gtk-4.0-dev build-essential curl wget libglib2.0-dev libssl-dev libgtk-3-dev libappindicator3-dev librsvg2-dev libappindicator-dev libgdk3.0-cil libatk1.0-dev libgtk-3-dev 
          version: rust-ci
          execute_install_scripts: true

      - name: install stable toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ inputs.toolchain }}
          targets: ${{ inputs.targets }}
          components: clippy, rustfmt

      - name: rust cache
        id: rust-cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: "${{ inputs.workdir }}"
          cache-targets: "false"
          cache-all-crates: "true"
          prefix-key: "rust-cache"
          shared-key: "${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}"

      - name: setup tools
        run: |
          cargo install cargo-audit --version 0.20.0
          cargo install cargo-auditable --version 0.6.2
          cargo install cargo2junit --version 0.1.13
          cargo install cargo-tarpaulin --version 0.29.2
          cargo install cargo-nextest --version 0.9.70

      - name: test
        run: |
          cargo nextest run --target-dir target
          cargo tarpaulin --skip-clean --all-features --workspace --out xml --output-dir target

      - name: build
        run: cargo install cargo-auditable && cargo auditable build --release
      - id: environments
        name: environments
        run: |
          opt="--no-deps --format-version 1"
          if [ -d "src-tauri" ]; then
            opt="$opt --manifest-path src-tauri/Cargo.toml"
          fi
          version=$(git describe --tags --abbrev=0)
          version=${version#v}
          version="$version-$(cargo metadata $opt | jq -r '.packages[0].version')"
          echo "
          project=$(cargo metadata $opt | jq -r '.packages[0].name')
          version=$version
          " >> "$GITHUB_OUTPUT"
        shell: bash

      - name: upload targets
        uses: actions/upload-artifact@v4
        with:
          name: targets
          path: |
              ${{ inputs.workdir }}target/release/${{ steps.environments.outputs.project }}
              ${{ inputs.workdir }}target/default/report.xml
              ${{ inputs.workdir }}target/cobertura.xml
