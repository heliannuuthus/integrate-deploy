on:
  workflow_call:
    inputs:
      workdir:
        required: false
        default: "./"
        type: "string"
        description: "Specify all of rust steps where are run"

    outputs:
      version:
        value: ${{ jobs.build.outputs.version }}
        description: "major version"

jobs:
  setup:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.workdir }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: restore rust cache
        uses: actions/cache/restore@v4
        id: cache-restore-cargo
        env:
          cache-name: cache-cargo
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-rust-store-${{ env.cache-name }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-rust-store-${{ env.cache-name }}-
      - name: setup
        if: ${{ steps.cache-restore-cargo.outputs.cache-hit != 'true' }}
        run: |
          rustup component add rustfmt clippy
          cargo install cargo-audit cargo2junit cargo-tarpaulin cargo-nextest

      - name: cache cargo
        if: ${{ steps.cache-restore-cargo.outputs.cache-hit != 'true' }}
        id: cache-save-cargo
        uses: actions/cache/save@v4
        env:
          cache-name: cache-cargo
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-rust-store-${{ env.cache-name }}-${{ hashFiles('**/Cargo.lock') }}

  lint:
    needs: [setup]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.workdir }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: restore rust cache
        uses: actions/cache/restore@v4
        id: cache-restore-cargo
        env:
          cache-name: cache-cargo
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-rust-store-${{ env.cache-name }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-rust-store-${{ env.cache-name }}-
      - name: setup
        if: ${{ steps.cache-restore-cargo.outputs.cache-hit != 'true' }}
        run: |
          rustup component add rustfmt clippy
          cargo install cargo-audit cargo2junit cargo-tarpaulin cargo-nextest

      - name: cache cargo
        if: ${{ steps.cache-restore-cargo.outputs.cache-hit != 'true' }}
        id: cache-save-cargo
        uses: actions/cache/save@v4
        env:
          cache-name: cache-cargo
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-rust-store-${{ env.cache-name }}-${{ hashFiles('**/Cargo.lock') }}

      - name: lint
        run: |
          cargo fmt --all -- --check
          cargo check --no-default-features
          cargo clippy --all-targets --all-features -- -D warnings

  build:
    needs: [lint]
    outputs:
      project: ${{ steps.environments.outputs.project }}
      version: ${{ steps.environments.outputs.version }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.workdir }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: restore rust cache
        uses: actions/cache/restore@v4
        id: cache-restore-cargo
        env:
          cache-name: cache-cargo
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-rust-store-${{ env.cache-name }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-rust-store-${{ env.cache-name }}-
      - name: setup
        if: ${{ steps.cache-restore-cargo.outputs.cache-hit != 'true' }}
        run: |
          rustup component add rustfmt clippy
          cargo install cargo-audit cargo2junit cargo-tarpaulin cargo-nextest

      - name: cache cargo
        if: ${{ steps.cache-restore-cargo.outputs.cache-hit != 'true' }}
        id: cache-save-cargo
        uses: actions/cache/save@v4
        env:
          cache-name: cache-cargo
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-rust-store-${{ env.cache-name }}-${{ hashFiles('**/Cargo.lock') }}

      - name: test
        run: |
          cargo nextest run --target-dir target
          cargo tarpaulin --skip-clean --all-features --workspace --out xml --output-dir target

      - name: build
        run: cargo install cargo-auditable && cargo auditable build --release
      - id: environments
        name: environments
        run: |
          opt="--no-deps --format-version 1"
          if [ -d "src-tauri" ]; then
            opt="$opt --manifest-path src-tauri/Cargo.toml"
          fi
          version=$(git describe --tags --abbrev=0)
          version=${version#v}
          version="$version-$(cargo metadata $opt | jq -r '.packages[0].version')"
          echo "
          project=$(cargo metadata $opt | jq -r '.packages[0].name')
          version=$version
          " >> "$GITHUB_OUTPUT"
        shell: bash

      - name: test
        run: |
          cargo nextest run --target-dir target
          cargo tarpaulin --skip-clean --all-features --workspace --out xml --output-dir target

      - name: build
        run: cargo install cargo-auditable && cargo auditable build --release
      - name: upload target
        uses: actions/upload-artifact@v3
        with:
          name: target
          path: |
              ${{ inputs.workdir }}target/release/${{ steps.environments.outputs.project }}
              ${{ inputs.workdir }}target/default/report.xml
              ${{ inputs.workdir }}target/cobertura.xml
