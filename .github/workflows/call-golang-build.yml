on:
  workflow_call:
    inputs:
      workdir:
        required: false
        default: "./"
        type: "string"
        description: "Specify all of steps where are run"
      GOOS:
        required: false
        default: "linux"
        type: "string"
        description: "GOOS target os"
      GOARCH:
        required: true
        type: "string"
        description: "GOARCH arch"
      ENTRANCE:
        required: false
        default: "main.go"
        type: string
        description: "main.go relative path"

    secrets:
      SONAR_HOST_URL:  
        required: false
        description: "sonar-scanner -Dsonar.token"
      SONAR_TOKEN:
        required: false
        description: "sonar-scanner -Dsonar.token"
   

    outputs:
      version:
        description: "golang application version"
        value: ${{ jobs.build.outputs.version }}

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.workdir }}
    outputs:
      version: ${{ steps.environments.outputs.version }}
    steps:

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: ./.github/workflows/call-sonar-setup.yml

      - uses: actions/setup-go@v5
        with:
          go-version: "1.20"
          cache: false

      - name: restore golang cache
        uses: actions/cache/restore@v4
        id: cache-restore-golang
        env:
          cache-name: cache-gomod
        with:
          path: |
            ~/go
          key: ${{ runner.os }}-golang-store-${{ env.cache-name }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-golang-store-${{ env.cache-name }}-

      - name: download gosec report
        uses: actions/download-artifact@v4
        with:
          name: gosec-report
          path: |
            ${{ inputs.workdir }}build/gosec-report.json
      
      - id: environments
        name: environments
        run: |
          version=$(git describe --tags $(git rev-list --tags --max-count=1) 2>/dev/null || echo "v0.1.0")
          version=${version#v}
          version="$version-$(git rev-parse --short HEAD)"
          project=$(go list -m)
          echo "
          project=${project##*/}
          version=$version
          sonar_enabled=${{ secrets.SONAR_TOKEN != '' && secrets.SONAR_HOST_URL != ''}}
          " >> "$GITHUB_OUTPUT"
        shell: bash

      - name: build binary
        run: |
          mkdir -p build
          CGO_ENABLE=0 GOOS=${{ inputs.GOOS }} GOARCH=${{ inputs.GOARCH }} go build -a -o build/${{ steps.environments.outputs.project }} ${{ inputs.ENTRANCE }}

      - name: test
        run: |
          go test -gcflags="all=-N -l" -coverprofile=build/coverage.out -covermode count -json -v ./... 2>&1 | tee build/test.json | gotestfmt 
          go-junit-report -parser gojson -in build/test.json -out build/report.xml

      
      - name: sonar cache
        run: |
          echo 'SONAR_USER_HOME=~/.sonar' >> $GITHUB_ENV
          mkdir -p ~/.sonar/cache

      - uses: actions/cache/restore@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar-scanner

      - id: sonar
        if: ${{ steps.environments.outputs.sonar_enabled == 'true'}}
        name: sonar
        run: |
          sonar-scanner 
          -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }}
          -Dsonar.login=${{ secrets.SONAR_TOKEN }}
          -Dsonar.language=go
          -Dsonar.plugins.downloadOnlyRequired=true
          -Dsonar.sourceEncoding=UTF-8
          -Dsonar.exclusions=**/*_test.go,**/vendor/**
          -Dsonar.test.inclusions=**/*_test.go
          -Dsonar.test.exclusions=**/vendor/**
          -Dsonar.pullrequest.key=${{github.event.pull_request.number}}
          -Dsonar.pullrequest.branch=${{github.head_ref}}
          -Dsonar.pullrequest.base=${{github.base_ref}}
          -Dsonar.projectKey=${{ steps.environments.outputs.project }} 
          -Dsonar.projectVersion=${{ steps.environments.outputs.version }} 
          -Dsonar.go.test.reportPaths=build/report.xml
          -Dsonar.go.coverage.reportPaths=build/coverage.out
          tree ~/.sonar

      - uses: actions/cache/save@v4
        if: always()
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar-scanner

      - name: upload target
        uses: actions/upload-artifact@v4
        with:
          name: target
          path: |
            ${{ inputs.workdir }}build/${{ steps.environments.outputs.project }}
            ${{ inputs.workdir }}build/${{ steps.environments.outputs.project }}
