{% set init -%}
{% raw -%}
- name: restore rust cache
  uses: actions/cache/restore@v4
  id: cache-restore-cargo
  env:
    cache-name: cache-cargo
  with:
    path: |
      ~/.cargo/bin/
      ~/.cargo/registry/index/
      ~/.cargo/registry/cache/
      ~/.cargo/git/db/
      target/
    key: ${{ runner.os }}-rust-store-${{ env.cache-name }}-${{ hashFiles('**/Cargo.lock') }}
    restore-keys: |
      ${{ runner.os }}-rust-store-${{ env.cache-name }}-
- name: setup
  if: ${{ steps.cache-restore-cargo.outputs.cache-hit != 'true' }}
  env:
    CACHE_HINT: ${{ steps.cache-restore-cargo.outputs.cache-hit }}
    CACHE_HINT_STRING: ${{ steps.cache-restore-cargo.outputs.cache-hit != 'true' }}
    CACHE_HINT_BOOLEAN: ${{ steps.cache-restore-cargo.outputs.cache-hit != true}}
  run: |
    echo "CACHE_HINT: $CACHE_HINT"
    echo "CACHE_HINT_STRING: $CACHE_HINT_STRING"
    echo "$CACHE_HINT_BOOLEAN: CACHE_HINT_BOOLEAN"
    rustup component add rustfmt clippy
    cargo install cargo-audit cargo2junit cargo-tarpaulin cargo-nextest

- name: cache cargo
  if: ${{ steps.cache-restore-cargo.outputs.cache-hit != 'true' }}
  id: cache-save-cargo
  uses: actions/cache/save@v4
  env:
    cache-name: cache-cargo
  with:
    path: |
      ~/.cargo/bin/
      ~/.cargo/registry/index/
      ~/.cargo/registry/cache/
      ~/.cargo/git/db/
      target/
    key: ${{ runner.os }}-rust-store-${{ env.cache-name }}-${{ hashFiles('**/Cargo.lock') }}
{% endraw %}
{%- endset %}

{% set env -%}
{% raw -%}
- id: environments
  name: environments
  run: |
    echo "
    project=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].name')
    version=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].version')
    " >> "$GITHUB_OUTPUT"
  shell: bash
{% endraw %}
{%- endset %}

{% set lint -%}
- name: lint
  run: |
    cargo fmt --all -- --check
    cargo check --no-default-features
    cargo clippy --all-targets --all-features -- -D warnings
{% endset %}

{% set sec_scan -%}
- name: scan
  run: cargo generate-lockfile && cargo audit
{%- endset %}

{% set build -%}
- name: test
  run: |
    cargo nextest run --target-dir target
    cargo tarpaulin --skip-clean --all-features --workspace --out xml --output-dir target

- name: build
  run: cargo install cargo-auditable && cargo auditable build --release
{%- endset %}
