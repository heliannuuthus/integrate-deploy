buildscript {
    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "https://repo.spring.io/plugins-snapshot" }
        mavenCentral()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:3.2.3"
        classpath "io.spring.gradle:dependency-management-plugin:1.1.4"
        classpath "org.springdoc:springdoc-openapi-gradle-plugin:1.8.0"
        classpath "com.diffplug.spotless:spotless-plugin-gradle:6.25.0"
        classpath "me.qoomon:gradle-git-versioning-plugin:6.4.2"
        classpath "io.freefair.gradle:lombok-plugin:8.6"
        classpath "name.remal.gradle-plugins.sonarlint:sonarlint:3.4.9"
    }
}

ext {
    r2dbcConnCompVersion = "2.1.8"
    r2dbcSpiVersion = "1.0.0.RELEASE"
    r2dbcPoolVersion = "1.0.0.RELEASE"
    joseVersion = "0.9.2"
    log4j2Version = "2.19.0"
    guavaVersion = "31.1-jre"
    hutoolVersion = "5.8.10"
    springDocVersion = "2.0.2"
    bootVersion = "3.0.1"
    cloudVersion = "2022.0.0"
    alibabaCloudVersion = "2022.0.0.0-RC1"
    guavaVersion = "33.0.0-jre"
    lang3Version = "3.14.0"
    rngVersion = "1.5"
    spotlessVersion = "1.21.0"
    helianthusCommonVersion = "0.1.1-d25a232"
}

sourceCompatibility = 17
targetCompatibility = 17

gitVersioning.apply {
    refs {
        branch("master") {
            version = '${version}-${commit.short}'
        }
        branch(".+") {
            version = '${version}-${commit.short}-SNAPSHOT'
        }
    }
}

dependencies {
    implementation "org.springframework.boot:spring-boot-starter-data-r2dbc"
    implementation "org.springframework.boot:spring-boot-starter-validation"
    implementation "org.springframework.boot:spring-boot-devtools"
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "io.projectreactor:reactor-test"

    //apollo
    // implementation "io.ghrc:helianthus-annuus-apollo-client:${helianthusCommonVersion}"

    // spring cloud
    implementation "com.alibaba.cloud:spring-cloud-starter-alibaba-nacos-discovery"


    // utils
    implementation "com.google.guava:guava:${guavaVersion}"
    implementation "org.apache.commons:commons-lang3:${lang3Version}"
    implementation "org.apache.commons:commons-rng-simple:${rngVersion}"

}

allprojects {

    apply plugin: "jacoco"
    apply plugin: "org.springframework.boot"
    apply plugin: "io.spring.dependency-management"
    apply plugin: "com.diffplug.spotless"
    apply plugin: "io.freefair.lombok"
    apply plugin: "me.qoomon.git-versioning"
    apply plugin: "name.remal.sonarlint"

    jacoco {
        toolVersion = "0.8.11"
    }

    jacocoTestReport {
        dependsOn test
        reports {
            html.required = true
            html.outputLocation = layout.buildDirectory.dir('reports/jacoco/html')
            xml.required = true
            xml.outputLocation = layout.buildDirectory.file("reports/jacocoReports.xml")
        }
    }

    spotless {
        java {
            importOrder()
            removeUnusedImports()
            googleJavaFormat("${spotlessVersion}").groupArtifact("com.google.googlejavaformat:google-java-format")
            formatAnnotations()
        }
    }

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
        all*.exclude module: "spring-boot-starter-logging"
    }

    repositories {
        maven { url "https://maven.aliyun.com/nexus/content/groups/public" }
        maven { url "https://maven.aliyun.com/nexus/content/repositories/jcenter" }
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/heliannuuthus/${project.name}"
            credentials {
                username = rootProject.findProperty("gpr.user") ?: System.getenv("GPR_USER")
                password = rootProject.findProperty("gpr.token") ?: System.getenv("GPR_TOKEN")
            }
        }
        mavenCentral()
    }

    tasks.named("test") {
        useJUnitPlatform()
        finalizedBy jacocoTestReport
    }

    tasks.register("name") {
        logger.quiet(project.name)
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-dependencies:${bootVersion}"
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${cloudVersion}"
            mavenBom "com.alibaba.cloud:spring-cloud-alibaba-dependencies:${alibabaCloudVersion}"
        }
    }
}

bootJar {
    archiveFileName = "app.${archiveExtension.get()}"
}